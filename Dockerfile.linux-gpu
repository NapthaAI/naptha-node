# Use NVIDIA Ubuntu 24.04 as the base image
FROM nvidia/cuda:12.2.0-base-ubuntu22.04

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV DEBIAN_FRONTEND noninteractive
ENV RABBITMQ_LOG_BASE /var/log/rabbitmq
ENV PATH="/root/miniforge3/bin:${PATH}"

# Set work directory
WORKDIR /app

# Install system dependencies, build tools, and networking utilities
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    lsb-release \
    supervisor \
    gcc \
    g++ \
    python3-dev \
    net-tools \  
    psmisc \     
    lsof \  
    iproute2 \
    libnuma-dev \
    wget \
    git \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Install Miniforge
RUN wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh && \
    bash Miniforge3-Linux-x86_64.sh -b -p $HOME/miniforge3 && \
    rm Miniforge3-Linux-x86_64.sh

# Add conda to PATH
RUN echo "source $HOME/miniforge3/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

# Install SurrealDB
RUN curl -sSf https://install.surrealdb.com | sh

# Install RabbitMQ and Erlang from CloudSmith repository
RUN curl -1sLf "https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/setup.deb.sh" | bash && \
    curl -1sLf "https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/setup.deb.sh" | bash && \
    apt-get update && \
    apt-get install -y erlang-base \
                       erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \
                       erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \
                       erlang-runtime-tools erlang-snmp erlang-ssl \
                       erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl \
                       rabbitmq-server && \
    rm -rf /var/lib/apt/lists/*

# Set up RabbitMQ directories and permissions
RUN mkdir -p /var/log/rabbitmq /var/lib/rabbitmq && \
    chown -R rabbitmq:rabbitmq /var/log/rabbitmq /var/lib/rabbitmq && \
    chmod 777 /var/log/rabbitmq /var/lib/rabbitmq

# Install Ollama
RUN curl https://ollama.ai/install.sh | sh

# Create conda environment with Python 3.12
RUN conda create -n myenv python=3.12 -y

# Activate conda environment
SHELL ["conda", "run", "-n", "myenv", "/bin/bash", "-c"]

# Install vLLM dependencies
RUN pip install -vv vllm poetry

# Copy the rest of the project files
COPY . .

# Run the setup script
RUN chmod +x /app/setup_venv.sh
RUN /bin/bash -c "source $HOME/.profile && /app/setup_venv.sh"

# Create log directory and files
RUN mkdir -p /var/log && \
    touch /var/log/supervisord.log && \
    touch /var/log/rabbitmq.log && \
    touch /var/log/rabbitmq.err.log && \
    touch /var/log/ollama.log && \
    touch /var/log/ollama.err.log && \
    touch /var/log/vllm.log && \
    touch /var/log/vllm.err.log && \
    touch /var/log/gateway.log && \
    touch /var/log/gateway.err.log && \
    touch /var/log/celery.log && \
    touch /var/log/celery.err.log && \
    chmod 666 /var/log/*.log

# Copy .env file
COPY .env /app/.env

# Expose ports
EXPOSE 3001 3002 7001 7002 5672 15672 11434

# Set up supervisord configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Start supervisord
CMD ["conda", "run", "--no-capture-output", "-n", "myenv", "/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]